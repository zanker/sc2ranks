#!/usr/bin/env ruby
RAILS_ROOT = File.expand_path(File.join(File.dirname(__FILE__), ".."))
Dir.chdir(RAILS_ROOT)
require "rubygems"
require "#{RAILS_ROOT}/config/environment.rb"
require "uri"
require "net/http"
puts "Quick verifying characters"

PER_RUN = 1000

has_data = true
offset = ARGV.first.to_i
id = 1
full_run = Time.now.to_f

puts "Starting at offset #{offset}"
while( has_data ) do
	has_data = nil
	
	puts "Loading #{offset + PER_RUN} characters..."
	verified_chars = 0
	
	offset_time = Time.now.to_f
	Character.all(:select => "id, region, bnet_id, name", :conditions => "character_code is null", :limit => PER_RUN, :offset => offset, :order => "updated_at ASC").each do |character|
		has_data = true
		
		time_taken = Time.now.to_f
		full_url = "http://#{FORCE_REGION[character.region] || character.region}.battle.net/sc2/#{LOCALES[character.region]}/profile/#{character.bnet_id}/#{LOCALE_IDS[character.region]}/#{URI.escape(character.name)}/"
		
		begin
			response = open(full_url,
				"Cookie" => "int-SC2=1",
				"User-Agent" => "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_4; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.464.0 Safari/534.3",
				"Accept-Encoding" => "gzip,deflate")
					
			time_taken = Time.now.to_f - time_taken
			time_taken = "%.2f" % time_taken		
		
			# couldn't verify, 404 means nuke it
			if response.status[0].to_i == 404
				puts "[#{id}] [#{time_taken}] Failed to verify #{character.region.upcase}-#{character.name} ##{character.bnet_id} (code #{response.status[0]} #{response.status[1]}, DELETING), #{full_url}"
			
				# Remove the character and the teams associated with them
				character.delete
				total_removed = TeamCharacter.delete_all(["character_id = ?", character.id])
				puts "Nuked #{total_removed} team associations"
			# Couldn't verify, but might have been due to a server error
			elsif response.status[0].to_i != 200
				puts "[#{id}] [#{time_taken}] Failed to verify #{character.region.upcase}-#{character.name} ##{character.bnet_id} (code #{response.status[0]} #{response.status[1]}), #{full_url}"
			else
				content = Armory::Node.inflate_response(response)
				next if content.blank?
				
				doc = Nokogiri::HTML(content)
				next if doc.nil?

				profile_doc = doc.xpath("//div[@id='profile-header']/h2/a/span")
				character_code = 0
				if profile_doc && profile_doc.text().match(/[0-9]+/)
					character_code = profile_doc.text().match(/([0-9]+)/)[1].to_i
				end
			
				next if character_code == 0
				character.character_code = character_code
				character.save
			
				puts "[#{id}] [%.2f] Verified #{character.region.upcase}-#{character.name}##{character.character_code} bnet #{character.bnet_id} (code #{response.status[0]} #{response.status[1]})" % time_taken
				verified_chars += 1
			end
		rescue Interrupt => e
			puts "Interrupted"
			return
		rescue Exception => e
			puts e.to_s
		end
		
		id += 1
	end

	puts "Took %.2f seconds to run batch #{offset}, verified #{verified_chars} characters" % (Time.now.to_f - offset_time)
	offset += PER_RUN
end

puts "Finished! Took %.2f seconds" % (Time.now.to_f - full_run)





