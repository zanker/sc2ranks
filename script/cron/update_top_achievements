#!/usr/bin/env ruby-worker-env
RAILS_ROOT = File.expand_path(File.join(File.dirname(__FILE__), "..", ".."))
Dir.chdir(RAILS_ROOT)
require "rubygems"
require "#{RAILS_ROOT}/config/environment.rb"

puts "Loading top 1000 achievement data"
start_time = Time.now.to_f

conditions = Rails.cache.read("maint/checks")
conditions = conditions.blank? ? "" : " AND #{conditions}"

Character.all(:conditions => "achievement_points > 0 AND achievement_points != #{ACHIEVEMENT_CAP}#{conditions}", :limit => 1000, :order => "achievement_points DESC").each do |character|
	begin
		job_args = {:region => character.region, :bnet_id => character.bnet_id, :name => character.name}
		method, url_args = Jobs::PullAchievements.get_url(job_args)
		
		response, url = Armory::Node.pull_custom_data(character.region, url_args)
		doc = response && Nokogiri::HTML(response)
		next if response.blank? || doc.nil?

		print "Pulling #{character.region.upcase}-#{character.name} (#{character.achievement_points} points)... "
		
		start_time = Time.now.to_f
		Jobs::PullAchievements.parse(job_args, doc, response)
	
		puts "finished %.2f seconds" % [Time.now.to_f - start_time]
	rescue EOFError, OpenURI::HTTPError, Errno::ECONNRESET, Timeout::Error, SocketError, Errno::ECONNREFUSED, Errno::ETIMEDOUT, Errno::EHOSTUNREACH, Errno::ENETUNREACH => e
		puts "Error pulling #{character.region.upcase}-#{character.name} (#{character.achievement_points} points)"
		puts "#{e.class}: #{e.message} (#{url})"
		next
	end
end

puts "Finished in %.2f seconds" % [Time.now.to_f - start_time]